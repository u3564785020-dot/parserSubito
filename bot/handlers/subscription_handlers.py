"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
"""
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from datetime import datetime

from bot.keyboards import get_subscription_keyboard, get_main_menu
from core.database import UserRepository
from config import SUBSCRIPTION_PLANS
import logging

logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text == "üí∞ –ü–†–ê–ô–°")
@router.message(Command("prices"))
async def cmd_prices(message: Message, user_repo: UserRepository):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞—Ä–∏—Ñ–æ–≤"""
    user = await user_repo.get_user(message.from_user.id)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
    subscription_info = ""
    if user and user.subscription_end and user.subscription_end > datetime.utcnow():
        remaining = user.subscription_end - datetime.utcnow()
        hours = int(remaining.total_seconds() / 3600)
        minutes = int((remaining.total_seconds() % 3600) / 60)
        subscription_info = f"\n‚è± <b>–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b> {hours}—á {minutes}–º–∏–Ω\n"
    
    prices_text = (
        "üí∞ <b>–ü–†–ê–ô–° / –ë–û–ù–£–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:\n\n"
        "‚è± <b>1 —á–∞—Å</b> - –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥\n"
        "üìÖ <b>24 —á–∞—Å–∞</b> - –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä\n"
        "üìÜ <b>48 —á–∞—Å–æ–≤</b> - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞\n"
        f"{subscription_info}\n"
        "üí° <i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.\n"
        "–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ —á–∞—Å—ã –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</i>"
    )
    
    await message.answer(
        prices_text,
        reply_markup=get_subscription_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("sub_"))
async def process_subscription(callback: CallbackQuery, user_repo: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    plan = callback.data.replace("sub_", "")
    
    if plan not in SUBSCRIPTION_PLANS:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return
    
    hours = SUBSCRIPTION_PLANS[plan]
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ–∫–∞ –±–µ–∑ –æ–ø–ª–∞—Ç—ã)
    info_text = (
        f"üìã <b>–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {plan}</b>\n\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours} —á–∞—Å(–æ–≤)\n\n"
        "üí° –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö —á–∞—Å–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    await callback.message.answer(info_text, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu())
    await callback.answer()

