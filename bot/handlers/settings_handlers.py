"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞
"""
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.keyboards import get_settings_keyboard, get_main_menu, get_cancel_keyboard
from core.database import UserRepository
import logging

logger = logging.getLogger(__name__)

router = Router()


class SettingsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    waiting_min_price = State()
    waiting_max_price = State()
    waiting_max_listings = State()
    waiting_max_rating = State()
    waiting_max_likes = State()
    waiting_max_seller_listings = State()
    waiting_seller_year = State()
    waiting_max_views = State()
    waiting_keywords = State()


@router.message(F.text == "üîß –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞")
@router.message(Command("change_params"))
async def cmd_change_params(message: Message, user_repo: UserRepository):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
    user = await user_repo.get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    settings = user.search_settings
    
    settings_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Subito (üáÆüáπ)</b>\n\n"
        f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {settings.get('min_price', 5)} EUR\n"
        f"üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {settings.get('max_price', 3000)} EUR\n"
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {settings.get('max_listings', 4)}\n"
        f"‚≠ê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {settings.get('max_rating', 0)}\n"
        f"‚ù§Ô∏è –ú–∞–∫—Å. –ª–∞–π–∫–æ–≤: {settings.get('max_likes', 0)}\n"
        f"üìù –ú–∞–∫—Å. –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É –ø—Ä–æ–¥–∞–≤—Ü–∞: {settings.get('max_seller_listings', 1)}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {settings.get('seller_registration_year', 2025)}\n"
        f"üëÅÔ∏è –ú–∞–∫—Å. –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {settings.get('max_views', 0)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    )
    
    await message.answer(
        settings_text,
        reply_markup=get_settings_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "set_min_price")
async def set_min_price(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
    await callback.message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ EUR:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(SettingsStates.waiting_min_price)
    await callback.answer()


@router.message(SettingsStates.waiting_min_price)
async def process_min_price(message: Message, state: FSMContext, user_repo: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    try:
        min_price = float(message.text)
        if min_price < 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        user = await user_repo.get_user(message.from_user.id)
        user.search_settings['min_price'] = min_price
        await user_repo.update_user(user)
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {min_price} EUR",
            reply_markup=get_main_menu()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")


@router.callback_query(F.data == "set_max_price")
async def set_max_price(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
    await callback.message.answer(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ EUR:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(SettingsStates.waiting_max_price)
    await callback.answer()


@router.message(SettingsStates.waiting_max_price)
async def process_max_price(message: Message, state: FSMContext, user_repo: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    try:
        max_price = float(message.text)
        if max_price < 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        user = await user_repo.get_user(message.from_user.id)
        user.search_settings['max_price'] = max_price
        await user_repo.update_user(user)
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {max_price} EUR",
            reply_markup=get_main_menu()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")


@router.callback_query(F.data == "set_max_listings")
async def set_max_listings(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    await callback.message.answer(
        "üìä –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(SettingsStates.waiting_max_listings)
    await callback.answer()


@router.message(SettingsStates.waiting_max_listings)
async def process_max_listings(message: Message, state: FSMContext, user_repo: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    try:
        max_listings = int(message.text)
        if max_listings < 1:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        user = await user_repo.get_user(message.from_user.id)
        user.search_settings['max_listings'] = max_listings
        await user_repo.update_user(user)
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {max_listings}",
            reply_markup=get_main_menu()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")


@router.callback_query(F.data == "set_max_seller_listings")
async def set_max_seller_listings(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å. –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É –ø—Ä–æ–¥–∞–≤—Ü–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(SettingsStates.waiting_max_seller_listings)
    await callback.answer()


@router.message(SettingsStates.waiting_max_seller_listings)
async def process_max_seller_listings(message: Message, state: FSMContext, user_repo: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å. –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    try:
        max_seller_listings = int(message.text)
        if max_seller_listings < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        user = await user_repo.get_user(message.from_user.id)
        user.search_settings['max_seller_listings'] = max_seller_listings
        await user_repo.update_user(user)
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ú–∞–∫—Å. –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É –ø—Ä–æ–¥–∞–≤—Ü–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {max_seller_listings}",
            reply_markup=get_main_menu()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")


@router.callback_query(F.data == "set_seller_year")
async def set_seller_year(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    await callback.message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2020):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(SettingsStates.waiting_seller_year)
    await callback.answer()


@router.message(SettingsStates.waiting_seller_year)
async def process_seller_year(message: Message, state: FSMContext, user_repo: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    try:
        year = int(message.text)
        if year < 2000 or year > 2030:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (2000-2030):")
            return
        
        user = await user_repo.get_user(message.from_user.id)
        user.search_settings['seller_registration_year'] = year
        await user_repo.update_user(user)
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ì–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {year}",
            reply_markup=get_main_menu()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥:")


@router.callback_query(F.data == "set_keywords")
async def set_keywords(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    await callback.message.answer(
        "üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤–µ–ª–æ—Å–∏–ø–µ–¥, –∞–≤—Ç–æ–º–æ–±–∏–ª—å):\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(SettingsStates.waiting_keywords)
    await callback.answer()


@router.message(SettingsStates.waiting_keywords)
async def process_keywords(message: Message, state: FSMContext, user_repo: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    user = await user_repo.get_user(message.from_user.id)
    
    if message.text.strip() == "-":
        user.search_settings['keywords'] = []
        await user_repo.update_user(user)
        await state.clear()
        await message.answer("‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ—á–∏—â–µ–Ω—ã", reply_markup=get_main_menu())
        return
    
    keywords = [kw.strip() for kw in message.text.split(',') if kw.strip()]
    user.search_settings['keywords'] = keywords
    await user_repo.update_user(user)
    
    await state.clear()
    await message.answer(
        f"‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(keywords)}",
        reply_markup=get_main_menu()
    )


@router.callback_query(F.data == "save_settings")
async def save_settings(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await callback.message.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=get_main_menu())
    await callback.answer()

