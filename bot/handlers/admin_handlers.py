"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.filters import IsAdminFilter
from bot.keyboards import get_admin_menu, get_main_menu, get_cancel_keyboard
from core.database import UserRepository
import logging

logger = logging.getLogger(__name__)

router = Router()
router.message.filter(IsAdminFilter())


class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    waiting_user_id_for_bonus = State()
    waiting_bonus_hours = State()
    waiting_user_id_for_block = State()
    waiting_broadcast_message = State()


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@router.message(Command("stats"))
async def cmd_statistics(message: Message, user_repo: UserRepository):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    stats = await user_repo.get_statistics()
    
    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats.get('active_subscriptions', 0)}\n"
        f"üîç –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤: {stats.get('active_parsers', 0)}\n"
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('blocked_users', 0)}\n"
    )
    
    await message.answer(stats_text, parse_mode="HTML")


@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def cmd_user_management(message: Message):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    management_text = (
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üéÅ –î–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ —á–∞—Å—ã - –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n"
        "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é."
    )
    await message.answer(management_text, parse_mode="HTML")


@router.message(F.text == "üéÅ –î–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ —á–∞—Å—ã")
@router.message(Command("add_bonus"))
async def cmd_add_bonus_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö —á–∞—Å–æ–≤"""
    await message.answer(
        "üéÅ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö —á–∞—Å–æ–≤</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_user_id_for_bonus)


@router.message(AdminStates.waiting_user_id_for_bonus)
async def process_user_id_for_bonus(message: Message, state: FSMContext, user_repo: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–æ–Ω—É—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_menu())
        return
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = None
    if message.text.startswith('@'):
        # –ü–æ–∏—Å–∫ –ø–æ username
        user = await user_repo.get_user_by_username(message.text)
    else:
        # –ü–æ–∏—Å–∫ –ø–æ ID
        try:
            telegram_id = int(message.text)
            user = await user_repo.get_user(telegram_id)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID:")
            return
    
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞':"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(target_user_id=user.telegram_id)
    
    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: {user.telegram_id})\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_bonus_hours)


@router.message(AdminStates.waiting_bonus_hours)
async def process_bonus_hours(message: Message, state: FSMContext, user_repo: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–Ω—ã—Ö —á–∞—Å–æ–≤"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_menu())
        return
    
    try:
        hours = int(message.text)
        if hours <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        target_user_id = data.get('target_user_id')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—ã
        success = await user_repo.add_subscription_hours(target_user_id, hours)
        
        if success:
            await message.answer(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {hours} —á–∞—Å(–æ–≤) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}",
                reply_markup=get_admin_menu()
            )
            logger.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª {hours}—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤",
                reply_markup=get_admin_menu()
            )
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")


@router.message(F.text == "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@router.message(Command("block_user"))
async def cmd_block_user_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await message.answer(
        "üö´ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_user_id_for_block)


@router.message(AdminStates.waiting_user_id_for_block)
async def process_user_id_for_block(message: Message, state: FSMContext, user_repo: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_menu())
        return
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = None
    if message.text.startswith('@'):
        user = await user_repo.get_user_by_username(message.text)
    else:
        try:
            telegram_id = int(message.text)
            user = await user_repo.get_user(telegram_id)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID:")
            return
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await user_repo.block_user(user.telegram_id)
    
    if success:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: {user.telegram_id}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            reply_markup=get_admin_menu()
        )
        logger.info(f"üö´ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=get_admin_menu()
        )
    
    await state.clear()


@router.message(F.text == "üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
@router.message(Command("broadcast"))
async def cmd_broadcast_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await message.answer(
        "üì¢ <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n"
        "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞!",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_broadcast_message)


@router.message(AdminStates.waiting_broadcast_message)
async def process_broadcast_message(message: Message, state: FSMContext, user_repo: UserRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_menu())
        return
    
    broadcast_text = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = await user_repo.get_all_users()
    
    if not all_users:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=get_admin_menu())
        await state.clear()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    success_count = 0
    failed_count = 0
    
    for user in all_users:
        try:
            await message.bot.send_message(
                chat_id=user.telegram_id,
                text=f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{broadcast_text}",
                parse_mode="HTML"
            )
            success_count += 1
        except Exception as e:
            failed_count += 1
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
    
    result_text = (
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}"
    )
    
    await message.answer(result_text, reply_markup=get_admin_menu())
    await state.clear()
    
    logger.info(f"üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫")


@router.message(Command("unblock_user"))
async def cmd_unblock_user(message: Message, user_repo: UserRepository):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É)"""
    # –§–æ—Ä–º–∞—Ç: /unblock_user 123456789
    args = message.text.split()
    
    if len(args) < 2:
        await message.answer(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock_user <telegram_id –∏–ª–∏ @username>"
        )
        return
    
    user_identifier = args[1]
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = None
    if user_identifier.startswith('@'):
        user = await user_repo.get_user_by_username(user_identifier)
    else:
        try:
            telegram_id = int(user_identifier)
            user = await user_repo.get_user(telegram_id)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
            return
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
    success = await user_repo.unblock_user(user.telegram_id)
    
    if success:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ")


@router.message(Command("debug_parse"))
async def cmd_debug_parse(message: Message, user_repo: UserRepository):
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    await message.answer("üîç –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_repo.get_user(message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        debug_info = f"üë§ <b>–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}:</b>\n"
        debug_info += f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: {'‚úÖ –î–∞' if user.parsing_active else '‚ùå –ù–µ—Ç'}\n"
        debug_info += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'‚ùå –î–∞' if user.is_blocked else '‚úÖ –ù–µ—Ç'}\n"
        debug_info += f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {user.subscription_end}\n"
        debug_info += f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: {'‚úÖ –î–∞' if user.has_active_subscription() else '‚ùå –ù–µ—Ç'}\n\n"
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
        active_users = await user_repo.get_active_parsers()
        debug_info += f"üìä <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:</b> {len(active_users)}\n"
        
        if active_users:
            for u in active_users:
                debug_info += f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {u.telegram_id}: –ø–∞—Ä—Å–∏–Ω–≥={'‚úÖ' if u.parsing_active else '‚ùå'}, –ø–æ–¥–ø–∏—Å–∫–∞={'‚úÖ' if u.has_active_subscription() else '‚ùå'}\n"
        
        debug_info += f"\n‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:</b>\n"
        debug_info += f"üí∞ –¶–µ–Ω–∞: {user.search_settings.get('min_price', 'N/A')} - {user.search_settings.get('max_price', 'N/A')} EUR\n"
        debug_info += f"üìä –ú–∞–∫—Å. –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {user.search_settings.get('max_listings', 'N/A')}\n"
        debug_info += f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {user.search_settings.get('keywords', [])}\n"
        
        await message.answer(debug_info, parse_mode="HTML")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –Ω–∞–ø—Ä—è–º—É—é
        if user.parsing_active and user.has_active_subscription():
            await message.answer("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–∞—Ä—Å–µ—Ä Subito...")
            
            from parser import SubitoParser
            async with SubitoParser() as parser:
                listings = await parser.search_listings(user.search_settings, max_results=3)
                
                if listings:
                    await message.answer(f"‚úÖ –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ {len(listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                    if listings:
                        first_listing = listings[0]
                        await message.answer(f"üì¶ <b>–ü—Ä–∏–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n{first_listing.format_telegram_message()}", parse_mode="HTML")
                else:
                    await message.answer("‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞—à–µ–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        logger.error(f"üìã Traceback: {traceback.format_exc()}")


@router.message(Command("test_parse"))
async def cmd_test_parse(message: Message, user_repo: UserRepository):
    """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    from bot.utils import ParsingScheduler
    from aiogram import Bot
    
    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    bot = message.bot
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    scheduler = ParsingScheduler(bot, user_repo)
    
    await message.answer("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞
        await scheduler._parse_for_all_users()
        await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")


@router.message(Command("parse_status"))
async def cmd_parse_status(message: Message, user_repo: UserRepository):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
    active_users = await user_repo.get_active_parsers()
    
    if not active_users:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º")
        return
    
    status_text = f"üìä <b>–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞</b>\n\n"
    status_text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤: {len(active_users)}\n\n"
    
    for user in active_users:
        subscription_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user.has_active_subscription() else "‚ùå –ò—Å—Ç–µ–∫–ª–∞"
        status_text += (
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id}</b>\n"
            f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_status}\n"
            f"‚è∞ –î–æ: {user.subscription_end}\n"
            f"üîç –ü–∞—Ä—Å–∏–Ω–≥: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user.parsing_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
        )
    
    await message.answer(status_text, parse_mode="HTML")