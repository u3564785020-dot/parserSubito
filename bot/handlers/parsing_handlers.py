"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
"""
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from datetime import datetime

from core.database import UserRepository
from bot.keyboards import get_main_menu
import logging

logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text == "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")
@router.message(Command("parse"))
async def cmd_start_parsing(message: Message, user_repo: UserRepository):
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    user = await user_repo.get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if user.is_blocked:
        await message.answer("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not user.has_active_subscription():
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /prices –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø–∞—Ä—Å–∏–Ω–≥
    if user.parsing_active:
        await message.answer(
            "‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!\n\n"
            "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ'"
        )
        return
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    await user_repo.set_parsing_status(message.from_user.id, True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    settings = user.search_settings
    settings_info = (
        f"üí∞ –¶–µ–Ω–∞: {settings.get('min_price', 5)} - {settings.get('max_price', 3000)} EUR\n"
        f"üìä –ú–∞–∫—Å. –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {settings.get('max_listings', 4)}\n"
        f"üìù –ú–∞–∫—Å. –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É –ø—Ä–æ–¥–∞–≤—Ü–∞: {settings.get('max_seller_listings', 1)}\n"
    )
    
    keywords = settings.get('keywords', [])
    if keywords:
        settings_info += f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}\n"
    
    await message.answer(
        "üîò <b>–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥</b>\n\n"
        "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n\n"
        "üì¶ <b>–ü–ª–æ—â–∞–¥–∫–∞: Subito üáÆüáπ</b>\n\n"
        "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        f"{settings_info}\n"
        "üîç –ë–æ—Ç –Ω–∞—á–Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.\n\n"
        "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ'",
        parse_mode="HTML"
    )
    
    logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")


@router.message(F.text == "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
@router.message(Command("stop_parse"))
async def cmd_stop_parsing(message: Message, user_repo: UserRepository):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    user = await user_repo.get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    if not user.parsing_active:
        await message.answer("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")
        return
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    await user_repo.set_parsing_status(message.from_user.id, False)
    
    await message.answer(
        "‚ùå <b>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</b>\n\n"
        "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫'",
        parse_mode="HTML"
    )
    
    logger.info(f"üõë –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")


@router.message(F.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å")
@router.message(Command("start_parse"))
async def cmd_repeat_parsing(message: Message, user_repo: UserRepository):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await cmd_start_parsing(message, user_repo)

