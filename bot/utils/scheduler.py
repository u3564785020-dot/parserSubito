"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
"""
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from aiogram import Bot
from aiogram.types import FSInputFile, InputMediaPhoto
from datetime import datetime
import logging

from core.database import UserRepository
from parser import SubitoParser
from config import PARSE_INTERVAL

logger = logging.getLogger(__name__)


class ParsingScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    def __init__(self, bot: Bot, user_repo: UserRepository):
        self.bot = bot
        self.user_repo = user_repo
        self.scheduler = AsyncIOScheduler()
        self.is_running = False
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.is_running:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            self.scheduler.add_job(
                self._parse_for_all_users,
                trigger=IntervalTrigger(seconds=PARSE_INTERVAL),
                id='parse_all_users',
                name='Parse listings for all active users',
                replace_existing=True
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
            self.scheduler.add_job(
                self._check_subscriptions,
                trigger=IntervalTrigger(minutes=5),
                id='check_subscriptions',
                name='Check and deactivate expired subscriptions',
                replace_existing=True
            )
            
            self.scheduler.start()
            self.is_running = True
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            self.scheduler.shutdown()
            self.is_running = False
            logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _parse_for_all_users(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            logger.info("üîÑ –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
            active_users = await self.user_repo.get_active_parsers()
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º: {len(active_users)}")
            
            if not active_users:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
                return
            
            logger.info(f"üîç –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {len(active_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            async with SubitoParser() as parser:
                logger.info("‚úÖ –ü–∞—Ä—Å–µ—Ä Subito –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                for user in active_users:
                    try:
                        logger.info(f"üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} (–ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {user.subscription_end})")
                        await self._parse_for_user(user, parser)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}")
            
            logger.info("‚úÖ –¶–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            import traceback
            logger.error(f"üìã Traceback: {traceback.format_exc()}")
    
    async def _parse_for_user(self, user, parser: SubitoParser):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
            settings = user.search_settings
            max_listings = settings.get('max_listings', 4)
            
            logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {settings}")
            logger.info(f"üìä –ú–∞–∫—Å–∏–º—É–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {max_listings}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            logger.info(f"üåê –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –Ω–∞ Subito.it...")
            listings = await parser.search_listings(settings, max_results=max_listings)
            
            logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(listings) if listings else 0}")
            
            if not listings:
                logger.info(f"‚ÑπÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            sent_count = 0
            for listing in listings:
                if not user.is_listing_seen(listing.listing_id):
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {listing.listing_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                    await self._send_listing_to_user(user.telegram_id, listing)
                    await self.user_repo.add_seen_listing(user.telegram_id, listing.listing_id)
                    sent_count += 1
                else:
                    logger.debug(f"‚è≠Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ {listing.listing_id} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
            
            if sent_count > 0:
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
            else:
                logger.info(f"‚ÑπÔ∏è –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}")
            import traceback
            logger.error(f"üìã Traceback: {traceback.format_exc()}")
    
    async def _send_listing_to_user(self, telegram_id: int, listing):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = listing.format_telegram_message()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            if listing.image_url:
                try:
                    await self.bot.send_photo(
                        chat_id=telegram_id,
                        photo=listing.image_url,
                        caption=message_text,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}")
                    await self.bot.send_message(
                        chat_id=telegram_id,
                        text=message_text,
                        parse_mode="HTML",
                        disable_web_page_preview=False
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await self.bot.send_message(
                    chat_id=telegram_id,
                    text=message_text,
                    parse_mode="HTML",
                    disable_web_page_preview=False
                )
            
            logger.debug(f"üì§ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {listing.listing_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
    
    async def _check_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
            active_users = await self.user_repo.get_active_parsers()
            
            deactivated_count = 0
            for user in active_users:
                if not user.has_active_subscription():
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
                    await self.user_repo.set_parsing_status(user.telegram_id, False)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    try:
                        await self.bot.send_message(
                            chat_id=user.telegram_id,
                            text=(
                                "‚è± <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>\n\n"
                                "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø–∞—Ä—Å–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n"
                                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É: /prices"
                            ),
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                    
                    deactivated_count += 1
                    logger.info(f"‚è± –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            
            if deactivated_count > 0:
                logger.info(f"‚è± –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {deactivated_count}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

