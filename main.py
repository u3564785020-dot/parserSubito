"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Subito.it
"""
import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from config import BOT_TOKEN, MONGO_URI, MONGO_DB_NAME
from core.database import mongodb, UserRepository
from bot.handlers import (
    basic_handlers,
    profile_handlers,
    settings_handlers,
    subscription_handlers,
    parsing_handlers,
    admin_handlers
)
from bot.utils import ParsingScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    dp = Dispatcher()
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    try:
        await mongodb.connect(MONGO_URI, MONGO_DB_NAME)
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB: {e}")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_repo = UserRepository(mongodb.get_database())
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ user_repo –≤ handlers
    @dp.message.middleware()
    async def user_repo_middleware(handler, event, data):
        data['user_repo'] = user_repo
        return await handler(event, data)
    
    @dp.callback_query.middleware()
    async def callback_user_repo_middleware(handler, event, data):
        data['user_repo'] = user_repo
        return await handler(event, data)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(basic_handlers.router)
    dp.include_router(profile_handlers.router)
    dp.include_router(settings_handlers.router)
    dp.include_router(subscription_handlers.router)
    dp.include_router(parsing_handlers.router)
    dp.include_router(admin_handlers.router)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = ParsingScheduler(bot, user_repo)
    scheduler.start()
    
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    try:
        # –ó–∞–ø—É—Å–∫ polling
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler.stop()
        
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB
        await mongodb.disconnect()
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
        await bot.session.close()
        
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

